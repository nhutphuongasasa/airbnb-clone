import { Router } from "express"
import { ListingRepository } from "./infrastructure/repository"
import { ListingHttpService } from "./infrastructure/transport/http-service"
import { ListingUseCase } from "./usecase"

export const  setupListingModule = () => {
    const repository = new ListingRepository()
    const usecase = new ListingUseCase(repository)
    const httpService = new ListingHttpService(usecase)

    const router = Router()

    // router.get("/me", httpService.getListMe.bind(httpService))
    // router.get("/:id", httpService.getDetail.bind(httpService))
    // router.post("/", httpService.create.bind(httpService))
    // router.get("/", httpService.getList.bind(httpService))
    // router.delete("/:id", httpService.deleteListing.bind(httpService))

/**
 * @openapi
 * /api/listing/me:
 *   get:
 *     tags:
 *       - Listings
 *     summary: L·∫•y danh s√°ch listing c·ªßa ch√≠nh ng∆∞·ªùi d√πng (current user)
 *     responses:
 *       200:
 *         description: Danh s√°ch listing c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                   title:
 *                     type: string
 *                   description:
 *                     type: string
 *                   imageSrc:
 *                     type: array
 *                     items:
 *                       type: string
 *                       format: uri
 *                   category:
 *                     type: string
 *                   roomCount:
 *                     type: integer
 *                   bathroomCount:
 *                     type: integer
 *                   guestCount:
 *                     type: integer
 *                   locationValue:
 *                     type: string
 *                   userId:
 *                     type: string
 *                   price:
 *                     type: number
 *       401:
 *         description: Ch∆∞a x√°c th·ª±c ng∆∞·ªùi d√πng
 */

router.get("/me", httpService.getListMe.bind(httpService));

/**
 * @openapi
 * /api/listing/{id}:
 *   get:
 *     tags:
 *       - Listings
 *     summary: L·∫•y chi ti·∫øt m·ªôt listing theo ID
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID c·ªßa listing c·∫ßn l·∫•y
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt c·ªßa listing
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                 title:
 *                   type: string
 *                 description:
 *                   type: string
 *                 imageSrc:
 *                   type: array
 *                   items:
 *                     type: string
 *                     format: uri
 *                 category:
 *                   type: string
 *                 roomCount:
 *                   type: integer
 *                 bathroomCount:
 *                   type: integer
 *                 guestCount:
 *                   type: integer
 *                 locationValue:
 *                   type: string
 *                 userId:
 *                   type: string
 *                 price:
 *                   type: number
 *                 user:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                     name:
 *                       type: string
 *                     email:
 *                       type: string
 *                       format: email
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y listing
 */

router.get("/:id", httpService.getDetail.bind(httpService));

/**
 * @openapi
 * /api/listing:
 *   post:
 *     tags:
 *       - Listings
 *     summary: T·∫°o m·ªôt listing m·ªõi
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - description
 *               - category
 *               - roomCount
 *               - bathroomCount
 *               - guestCount
 *               - location
 *               - price
 *               - userId
 *             properties:
 *               title:
 *                 type: string
 *                 example: "Bi·ªát th·ª± sang tr·ªçng ƒê√† L·∫°t"
 *               description:
 *                 type: string
 *                 example: "View ƒë·ªìi th√¥ng, ƒë·∫ßy ƒë·ªß ti·ªán nghi"
 *               imageSrc:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: uri
 *                 example: ["https://example.com/image1.jpg"]
 *               category:
 *                 type: string
 *                 example: "Villa"
 *               roomCount:
 *                 type: integer
 *                 example: 3
 *               bathroomCount:
 *                 type: integer
 *                 example: 2
 *               guestCount:
 *                 type: integer
 *                 example: 6
 *               location:
 *                 type: object
 *                 properties:
 *                   value:
 *                     type: string
 *                     example: "VN-63"
 *                   label:
 *                     type: string
 *                     example: "L√¢m ƒê·ªìng"
 *                   flag:
 *                     type: string
 *                     example: "üáªüá≥"
 *                   latlng:
 *                     type: array
 *                     items:
 *                       type: number
 *                     example: [11.9404, 108.4583]
 *                   region:
 *                     type: string
 *                     example: "T√¢y Nguy√™n"
 *               price:
 *                 type: number
 *                 example: 120
 *               userId:
 *                 type: string
 *                 example: "64f2bcbcb20bd28a64a3c123"
 *     responses:
 *       201:
 *         description: Listing ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                 title:
 *                   type: string
 *                 description:
 *                   type: string
 *                 imageSrc:
 *                   type: array
 *                   items:
 *                     type: string
 *                 category:
 *                   type: string
 *                 roomCount:
 *                   type: integer
 *                 bathroomCount:
 *                   type: integer
 *                 guestCount:
 *                   type: integer
 *                 locationValue:
 *                   type: string
 *                 userId:
 *                   type: string
 *                 price:
 *                   type: number
 *                 user:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                     name:
 *                       type: string
 *                     email:
 *                       type: string
 *                       format: email
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */

router.post("/", httpService.create.bind(httpService));

/**
 * @openapi
 * /api/listing:
 *   get:
 *     tags:
 *       - Listings
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ listing theo ƒëi·ªÅu ki·ªán l·ªçc
 *     parameters:
 *       - name: userId
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *         description: ID c·ªßa ng∆∞·ªùi d√πng (ng∆∞·ªùi t·∫°o listing)
 *       - name: category
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *         description: Danh m·ª•c c·ªßa listing
 *       - name: roomCount
 *         in: query
 *         required: false
 *         schema:
 *           type: integer
 *         description: S·ªë ph√≤ng ng·ªß t·ªëi thi·ªÉu
 *       - name: bathroomCount
 *         in: query
 *         required: false
 *         schema:
 *           type: integer
 *         description: S·ªë ph√≤ng t·∫Øm t·ªëi thi·ªÉu
 *       - name: guestCount
 *         in: query
 *         required: false
 *         schema:
 *           type: integer
 *         description: S·ªë l∆∞·ª£ng kh√°ch t·ªëi thi·ªÉu
 *       - name: localVale
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *         description: ƒê·ªãa ƒëi·ªÉm c·ª• th·ªÉ
 *       - name: price
 *         in: query
 *         required: false
 *         schema:
 *           type: number
 *         description: M·ª©c gi√° t·ªëi thi·ªÉu
 *       - name: startDate
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *           format: date
 *         description: Ng√†y b·∫Øt ƒë·∫ßu d·ª± ki·∫øn thu√™
 *       - name: endDate
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *           format: date
 *         description: Ng√†y k·∫øt th√∫c d·ª± ki·∫øn thu√™
 *     responses:
 *       200:
 *         description: Danh s√°ch listing ph√π h·ª£p
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                   title:
 *                     type: string
 *                   description:
 *                     type: string
 *                   imageSrc:
 *                     type: array
 *                     items:
 *                       type: string
 *                   category:
 *                     type: string
 *                   roomCount:
 *                     type: integer
 *                   bathroomCount:
 *                     type: integer
 *                   guestCount:
 *                     type: integer
 *                   locationValue:
 *                     type: string
 *                   userId:
 *                     type: string
 *                   price:
 *                     type: number
 *                   user:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                       name:
 *                         type: string
 *                       email:
 *                         type: string
 *                         format: email
 */

router.get("/", httpService.getList.bind(httpService));

/**
 * @openapi
 * /api/listing/{id}:
 *   delete:
 *     tags:
 *       - Listings
 *     summary: Xo√° m·ªôt listing theo ID
 *     description: Xo√° m·ªôt listing thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID c·ªßa listing c·∫ßn xo√°
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Danh s√°ch listing m·ªõi c·ªßa ng∆∞·ªùi d√πng sau khi xo√°
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                   title:
 *                     type: string
 *                   description:
 *                     type: string
 *                   imageSrc:
 *                     type: array
 *                     items:
 *                       type: string
 *                   category:
 *                     type: string
 *                   roomCount:
 *                     type: integer
 *                   bathroomCount:
 *                     type: integer
 *                   guestCount:
 *                     type: integer
 *                   locationValue:
 *                     type: string
 *                   userId:
 *                     type: string
 *                   price:
 *                     type: number
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y listing ho·∫∑c kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu ng∆∞·ªùi d√πng
 */

router.delete("/:id", httpService.deleteListing.bind(httpService));


    return router
}

export const listingUseCase = (): ListingUseCase => {
    const repository = new ListingRepository()
    return new ListingUseCase(repository)
}